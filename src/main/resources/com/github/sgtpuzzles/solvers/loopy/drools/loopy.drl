package com.github.sgtpuzzles.solvers.loopy.drools

import java.util.List
import java.util.Set

import org.drools.core.spi.KnowledgeHelper
import org.drools.core.util.bitmask.AllSetButLastBitMask
import org.kie.api.runtime.rule.FactHandle

import com.github.sgtpuzzles.grid.model.Edge
import com.github.sgtpuzzles.solvers.loopy.LineStatus
import com.github.sgtpuzzles.solvers.loopy.Move

import function com.github.sgtpuzzles.solvers.loopy.drools.AtMost.atMost
import function com.github.sgtpuzzles.solvers.loopy.drools.AtLeast.atLeast
import function java.lang.Math.min
import function java.lang.Math.max

global org.slf4j.Logger log

// Rules that work based on EdgeSettings
rule "Remove set edge from SimpleEdgeRestriction"
when
	$es : EdgeSetting($edge: edge)
	$er : SimpleEdgeRestriction(edges contains $edge)
then
	modify($er) { recordSetting($es) }
	if ($er instanceof AtLeast && $er.getExpectedYeses() <= 0
		|| $er instanceof AtMost && $er.getExpectedNos() <= 0) {
		delete($er);
	}
end

rule "Remove AssociatedEdgesGroup"
when
	$es : EdgeSetting($edge: edge)
	$g  : AssociatedEdgesGroup($edges: edges contains $edge)
	accumulate(EdgeSetting($ese: edge memberOf $edges); $allSetEdges: collectList($ese))
then
	delete($g);
	$g.getEdges().stream()
			.filter(e -> !$allSetEdges.contains(e))
			.forEach(e -> insert(new EdgeSetting(e, $es.getStatus())));
end

rule "CountOrNone becomes count"
when
	$es : EdgeSetting($edge: edge, status == LineStatus.LINE_YES)
	$con: CountOrNone(edges contains $edge)
then
	convertToCount(drools, $con);
end

rule "CountOrNone remove unset edge"
when
	$es : EdgeSetting($edge: edge, status == LineStatus.LINE_NO)
	$con: CountOrNone(edges contains $edge)
then
	modify($con) { recordSetting($es) }
end

rule "Merge ContinuousLines"
when
	$es   : EdgeSetting($edge: edge, $v1: edge.vertex1, $v2: edge.vertex2, status == LineStatus.LINE_YES)
	$line : ContinuousLine(ends contains $v1)
	$line2: ContinuousLine(this != $line, ends contains $v2)
then
	modify($line) { mergeWith($line2, $edge) };
	delete($line2)
end

rule "Extend ContinuousLine"
when
	$es  : EdgeSetting($edge: edge, $v1: edge.vertex1, $v2: edge.vertex2, status == LineStatus.LINE_YES)
	$line: ContinuousLine(ends contains $v1 || ends contains $v2, edges not contains $edge)
	// not merging two lines
	not ContinuousLine(this != $line, ends contains $v1 || ends contains $v2)
then
	modify($line) { extendWith($edge) };
end

rule "Init ContinuousLine"
when
	$es  : EdgeSetting($edge: edge, $v1: edge.vertex1, $v2: edge.vertex2, status == LineStatus.LINE_YES)
	// no continuous line with the edge and no possibility to merge or extend a continuous line
	not ContinuousLine(edges contains $edge || ends contains $v1 || ends contains $v2)
then
	insert(new ContinuousLine($edge));
end
	

rule "Retract EdgeSetting and record Move"
when
	$es : EdgeSetting($edge: edge)
	// setting has been processed by all rules above
	not EdgeRestriction(edges contains $edge)
	(ContinuousLine(edges contains $edge)
		or EdgeSetting($es == this, status == LineStatus.LINE_NO))
	$fg1: ConnectedFacesGroup(faces contains $edge.face1)
	$fg2: ConnectedFacesGroup(faces contains $edge.face2)
then
	delete($es);
	insert(new Move($es.getEdge(), $es.getStatus()));
	if ($fg1 != $fg2 && $fg1 != $fg2.getOppositeGroup()) {
		if ($es.getStatus() == LineStatus.LINE_NO) {
			mergeGroups(drools, $fg1, $fg1__Handle__, $fg2, $fg2__Handle__);
		} else {
			markAsOpposite(drools, $fg1, $fg1__Handle__, $fg2, $fg2__Handle__);
		}
	}
end

// Rules that infer EdgeSettings
rule "AtLeast requires all set"
when
	not EdgeSetting()
	$al : AtLeast(expectedNos == 0)
then
	delete($al);
	setAllEdges(drools, $al, LineStatus.LINE_YES);
end

rule "AtMost requires none set"
when
	not EdgeSetting()
	$am : AtMost(expectedYeses == 0)
then
	delete($am);
	setAllEdges(drools, $am, LineStatus.LINE_NO);
end

rule "Prevent closing isolated loop"
when
	not EdgeSetting()
	$edge: Edge($v1: vertex1, $v2: vertex2)
	not Move(edge == $edge)
	ContinuousLine(ends contains $v1, ends contains $v2)
	// this incidentally covers the case of remaining other ContinuousLines
	exists AtLeast(expectedYeses > 1 || expectedYeses > 0 && edges not contains $edge)
then
	insert(new EdgeSetting($edge, LineStatus.LINE_NO));
end

rule "Simple Impossible Face Edges"
when
	not EdgeSetting()
	AtMost($amEdges: edges, $yeses: expectedYeses)
	$eg: AssociatedEdgesGroup(edges.size > $yeses, $gEdges: edges)
	Set(size > $yeses) from collect (Edge(this memberOf $gEdges) from $amEdges)
then
	convertToNone(drools, $eg);
end

rule "Edge faces in opposite groups"
when
	not EdgeSetting()
	$edge: Edge($f1: face1, $f2: face2)
	not Move(edge == $edge)
	$fg1 : ConnectedFacesGroup(faces contains $f1)
	$fg2 : ConnectedFacesGroup(faces contains $f2, oppositeGroup == $fg1)
then
	insert(new EdgeSetting($edge, LineStatus.LINE_YES));
end

rule "Edge faces in same group"
when
	not EdgeSetting()
	$edge: Edge($f1: face1, $f2: face2)
	not Move(edge == $edge)
	$fg1 : ConnectedFacesGroup(faces contains $f1, faces contains $f2)
then
	insert(new EdgeSetting($edge, LineStatus.LINE_NO));
end

// Rules that infer other facts
rule "Merge groups from all-or-none"
when
	not EdgeSetting()
	$con: CountOrNone(allOrNone, $edges: edges)
	$e1 : Edge() from $edges
	$g1 : AssociatedEdgesGroup($gEdges: edges contains $e1)
	$e2 : Edge(this not memberOf $gEdges) from $edges
	$g2 : AssociatedEdgesGroup($e2 memberOf edges)
then
	mergeGroups(drools, $g1, $g1__Handle__, $g2, $g2__Handle__);
	if ($gEdges.containsAll($edges)) {
		delete($con);
	}
end

rule "AtLeast overlaps mandatory CountOrNone"
// still needed even with groups because of count-or-nones that aren't all-or-nones
when
	not EdgeSetting()
	$con: CountOrNone($edges: edges)
	AtLeast($atLeastEdges: edges, $atMostNos: expectedNos)
	// count common edges: can we satisfy AtLeast if we remove the CountOrNone?
	Set(size > $atMostNos)
		from collect (Edge(this memberOf $edges) from $atLeastEdges)
then
	convertToCount(drools, $con);
end

rule "AtLeast overlaps mandatory group"
when
	not EdgeSetting()
	AtLeast($alEdges: edges, $nos: expectedNos)
	$eg: AssociatedEdgesGroup(edges.size > $nos, $gEdges: edges)
	// count common edges: can we satisfy AtLeast if we remove the group?
	Set(size > $nos)
		from collect (Edge(this memberOf $gEdges) from $alEdges)
then
	delete($eg);
	setAllEdges(drools, $eg, LineStatus.LINE_YES);
end

rule "CountOrNone becomes none"
when
	not EdgeSetting()
	$con: CountOrNone($edges: edges, edges.size < expectedYeses)
then
	convertToNone(drools, $con);
end

rule "AtMost overlaps AtLeast with more edges than its expected yeses"
when
	not EdgeSetting()
	$am: AtMost($edgesA: edges, $amYeses: expectedYeses > 0)
	$al: AtLeast(
		$edgesB: edges,
		$alYeses: expectedYeses > $amYeses
	)
	exists Edge(this memberOf $edgesA, this memberOf $edgesB)
	exists Edge(this memberOf $edgesA, this not memberOf $edgesB)
	exists Edge(this memberOf $edgesB, this not memberOf $edgesA)
	$commonEdges: Set(size > $amYeses) from collect (Edge(this memberOf $edgesA) from $edgesB)
then
	insert(atMost($amYeses).amongEdges($commonEdges));
end

rule "AtLeast overlaps AtMost with more edges than its expected nos"
when
	not EdgeSetting()
	$am: AtMost($edgesA: edges, $amYeses: expectedYeses, expectedYeses > 0)
	$al: AtLeast(
		$edgesB: edges,
		$alYeses: expectedYeses,
		$alNos: expectedNos > 0
	)
	exists Edge(this memberOf $edgesA, this memberOf $edgesB)
	exists Edge(this memberOf $edgesA, this not memberOf $edgesB)
	exists Edge(this memberOf $edgesB, this not memberOf $edgesA)
	$commonEdges: Set(size > $alNos) from collect (Edge(this memberOf $edgesA) from $edgesB)
then
	insert(atLeast($commonEdges.size() - $alNos).amongEdges($commonEdges));
end

rule "AtLeast contains AtMost"
when
	not EdgeSetting()
	$am: AtMost($edgesA: edges, $amYeses: expectedYeses, expectedYeses > 0)
	$al: AtLeast(
		$edgesB: edges,
		$alYeses: expectedYeses > $amYeses,
		edges.size > $edgesA.size
	)
	// all edges of the AtMost are within the AtLeast
	not Edge(this memberOf $edgesA, this not memberOf $edgesB)
	$remainingEdges: Set() from collect (Edge(this not memberOf $edgesA) from $edgesB)
then
	insert(atLeast($alYeses - $amYeses).amongEdges($remainingEdges));
end

rule "AtMost contains AtLeast"
when
	not EdgeSetting()
	$am: AtMost($edgesA: edges, $amYeses: expectedYeses, expectedYeses > 0)
	$al: AtLeast(
		$edgesB: edges,
		$alYeses: expectedYeses > 0,
		edges.size < $edgesA.size,
		// remaining edges cannot all be yeses to still satisfsy both
		$edgesA.size - edges.size > $amYeses - expectedYeses
	)
	// all edges of the AtLeast are within the AtMost
	not Edge(this not memberOf $edgesA, this memberOf $edgesB)
	$remainingEdges: Set() from collect (Edge(this not memberOf $edgesB) from $edgesA)
then
	insert(atMost($amYeses - $alYeses).amongEdges($remainingEdges));
end

rule "Detect complementary all-or-nones"
when
	not EdgeSetting()
	// there is an "exactly" that expects half of its edges to be set
	AtMost($edges: edges, $yeses: expectedYeses * 2 == edges.size)
	AtLeast(edges == $edges, expectedYeses == $yeses)
	// there is a group overlapping with the same amount of edges
	$g1: AssociatedEdgesGroup($g1Edges: edges, $opGroup: oppositeGroup)
	Set(size == $yeses) from collect (Edge(this memberOf $g1Edges) from $edges)
	// there is another group which is not the opposite group but has a common edge
	$g2: AssociatedEdgesGroup(this != $g1, this != $opGroup, $g2Edges: edges)
	exists Edge(this memberOf $edges, this memberOf $g2Edges)
then
	markAsOpposite(drools, $g1, $g1__Handle__, $g2, $g2__Handle__);
end

rule "Complementary group overlaps a CountOrNone"
when
	not EdgeSetting()
	AssociatedEdgesGroup($edgesA: edges, $edgesB: oppositeGroup!.edges)
	// the overlapping count-or-none
	$overlap: CountOrNone($edgesO: edges)
	Edge(this memberOf $edgesA, this memberOf $edgesO)
	Edge(this memberOf $edgesB, this memberOf $edgesO)
then
	convertToCount(drools, $overlap);
end

rule "Complementary group overlaps AtLeast"
when
	not EdgeSetting()
	AssociatedEdgesGroup($edgesA: edges, $edgesB: oppositeGroup!.edges)
	// the overlapping AtLeast
	$overlap: AtLeast($edgesAL: edges, $yeses: expectedYeses)
	$overA: Set(size > 0) from collect (Edge(this memberOf $edgesA) from $edgesAL)
	$overB: Set(size > 0, size < $yeses || $overA.size < $yeses) from collect (Edge(this memberOf $edgesB) from $edgesAL)
	$remainingEdges: Set(size > 0) from collect (Edge(this not memberOf $edgesA, this not memberOf $edgesB) from $edgesAL)
then
	insert(atLeast($yeses - min($overA.size(), $overB.size())).amongEdges($remainingEdges));
end

rule "Complementary group overlaps AtMost"
when
	not EdgeSetting()
	AssociatedEdgesGroup($edgesA: edges, $edgesB: oppositeGroup!.edges)
	// the overlapping AtMost
	$overlap: AtMost($edgesAM: edges, $yeses: expectedYeses)
	$overA: Set(size > 0) from collect (Edge(this memberOf $edgesA) from $edgesAM)
	$overB: Set(size > 0) from collect (Edge(this memberOf $edgesB) from $edgesAM)
	$remainingEdges: Set(size > $yeses - min($overA.size, $overB.size)) from collect (Edge(this not memberOf $edgesA, this not memberOf $edgesB) from $edgesAM)
then
	insert(atMost($yeses - min($overA.size(), $overB.size())).amongEdges($remainingEdges));
end

rule "CountOrNone overlaps group with expected number of edges"
when
	not EdgeSetting()
	// there is a count or none which has twice its expected number of edges
	CountOrNone(!allOrNone, $cEdges: edges, $yeses: expectedYeses * 2 == edges.size)
	// there is a group that covers half of the edges, i.e. the number of expected yeses
	AssociatedEdgesGroup($gEdges: edges)
	Set(size == $yeses) from collect (Edge(this memberOf $gEdges) from $cEdges)
	// there remains edges which are not in the same group yet
	$e1 : Edge(this memberOf $cEdges, this not memberOf $gEdges)
	$e2 : Edge(this memberOf $cEdges, this not memberOf $gEdges)
	$g1 : AssociatedEdgesGroup(edges contains $e1)
	$g2 : AssociatedEdgesGroup(this != $g1, edges contains $e2)
then
	mergeGroups(drools, $g1, $g1__Handle__, $g2, $g2__Handle__);
end

rule "Two edges sharing the same face groups must be in the same group"
when
	not EdgeSetting()
	$e1: Edge()
	$e2: Edge(this != $e1)
	(
	($fg1: ConnectedFacesGroup(faces contains $e1.face1, faces contains $e2.face1)
		and ConnectedFacesGroup(this != $fg1, faces contains $e1.face2,
			faces contains $e2.face2))
	or
	($fg1: ConnectedFacesGroup(faces contains $e1.face1, faces contains $e2.face2)
		and ConnectedFacesGroup(this != $fg1, faces contains $e1.face2,
			faces contains $e2.face1))
	)
	$g1: AssociatedEdgesGroup(edges contains $e1)
	$g2: AssociatedEdgesGroup(this != $g1, edges contains $e2)
then
	mergeGroups(drools, $g1, $g1__Handle__, $g2, $g2__Handle__);
end

// functions
function void deleteCountOrNone(KnowledgeHelper drools, EdgeRestriction con) {
	drools.delete(con);
}

function void convertToCount(KnowledgeHelper drools, CountOrNone con) {
	deleteCountOrNone(drools, con);
	if (con.isAllOrNone()) {
		setAllEdges(drools, con, LineStatus.LINE_YES);
	} else {
		drools.insert(con.toAtLeast());
		drools.insert(con.toAtMost());
	}
}

function void convertToNone(KnowledgeHelper drools, EdgeRestriction r) {
	deleteCountOrNone(drools, r);
	setAllEdges(drools, r, LineStatus.LINE_NO);
}

function void setAllEdges(KnowledgeHelper drools, EdgeRestriction r, LineStatus s) {
	r.getEdges().forEach(e -> drools.insert(new EdgeSetting(e, s)));
}

/**
 * Merges two groups and then updates/delete them as needed.
 */
function void mergeGroups(KnowledgeHelper drools,
		AssociatedObjectsGroup g1, FactHandle g1Handle,
		AssociatedObjectsGroup g2, FactHandle g2Handle) {
	if (g1.mergeWith(g2)) {
		drools.delete(g2.getOppositeGroup());
	}
	if (g1.getOppositeGroup() != null) {
		drools.update(g1.getOppositeGroup());
	}
	drools.update(g1Handle, AllSetButLastBitMask.get(), AssociatedObjectsGroup.class);
	drools.delete(g2Handle);
}

/**
 * Marks two groups as opposites and then updates/delete them as needed.
 */
function void markAsOpposite(
		KnowledgeHelper drools,
		AssociatedObjectsGroup g1, FactHandle g1Handle,
		AssociatedObjectsGroup g2, FactHandle g2Handle) {
	if (g2.getOppositeGroup() != null) {
		drools.delete(g2.getOppositeGroup());
	}
	if (g1.markAsOpposite(g2)) {
		drools.delete(g2Handle);
	}
	drools.update(g1Handle, AllSetButLastBitMask.get(), AssociatedObjectsGroup.class);
	drools.update(g1.getOppositeGroup());
}

// queries
query getMoves ()
	$move: Move()
end